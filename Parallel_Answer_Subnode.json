{
  "nodes": [
    {
      "parameters": {
        "workflowInputs": {
          "values": [
            {
              "name": "mail_body"
            },
            {
              "name": "senders_email_ID"
            },
            {
              "name": "tel_id"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        1560,
        340
      ],
      "id": "1f3492ff-16a9-4cc8-8029-aa6eadf9380f",
      "name": "When Executed by Another Workflow"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Please Summarise this -\n\nCurrent Email:\n{{ $('When Executed by Another Workflow').item.json.mail_body }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=You are an intelligent email retrieval and summarization agent.\n\nYour task is to:\n\nIdentify and select any emails in the thread or related correspondence that are relevant to understanding the current situation.\n\nSummarize each relevant email clearly and concisely in 1–2 sentences.\n\nInput:\n\nCurrent Email:\n{{ $('When Executed by Another Workflow').item.json.mail_body }}\n\nPrevious Threads:\n{{ $json.result.join(\"/n\") }}\n\nEmail Sender:\n{{ $('When Executed by Another Workflow').item.json.senders_email_ID }}\n\nInstructions:\n\nReview all prior emails and select only those that are directly relevant to understanding or predicting the next likely step in this conversation.\n\nFor each relevant email, generate a clear 1–2 sentence summary.\n\nPresent your output as a JSON array of summaries."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        2540,
        260
      ],
      "id": "1588024b-9196-4a66-a28c-33e259d42c77",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"relevant_summaries\": [\n    \"Summary of relevant email 1.\",\n    \"Summary of relevant email 2.\",\n    \"... etc.\"\n  ]\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        2760,
        460
      ],
      "id": "00ebe51b-5830-4128-bef8-0e17bed397d9",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        2880,
        260
      ],
      "id": "3df03c77-97c4-4a2e-9951-c1a990499ddf",
      "name": "Pass Data"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Current Email:\n{{ $('When Executed by Another Workflow').item.json.mail_body }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=You are an advanced AI assistant that predicts multiple possible future scenarios in an email conversation.\n\nContext:\n{{ $('Code').item.json.result }}\n\nNew Email:\n{{ $('When Executed by Another Workflow').item.json.mail_body }}\n\nInstructions:\n1. Summarize this email in 1–2 sentences.\n2. Predict the most likely outcome if the user replies positively.\n3. Predict the most likely outcome if the user replies negatively.\n4. Predict the most likely outcome if the user does not reply at all.\n5. Provide a confidence score (0–100) for each prediction.\n6. Suggest which response strategy is most advisable, with a brief rationale."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        3100,
        260
      ],
      "id": "cbbb2513-a398-4fed-bae5-3af2b5b7256d",
      "name": "AI Agent1"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.toolThink",
      "typeVersion": 1,
      "position": [
        3160,
        480
      ],
      "id": "adc9ed3b-6731-4bb4-8a0c-1796d61af37d",
      "name": "Think"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"summary\": \"\",\n  \"positive_reply\": {\n    \"prediction\": \"\",\n    \"confidence\": \"\"\n  },\n  \"negative_reply\": {\n    \"prediction\": \"\",\n    \"confidence\": \"\"\n  },\n  \"no_reply\": {\n    \"prediction\": \"\",\n    \"confidence\": \"\"\n  },\n  \"recommended_strategy\": \"\",\n  \"rationale\": \"\"\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        3440,
        480
      ],
      "id": "e4d4295c-75a6-4418-afc0-fafc412b87a8",
      "name": "Structured Output Parser1"
    },
    {
      "parameters": {
        "model": "qwen/qwen3-32b",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        3040,
        480
      ],
      "id": "27802123-73ed-4b9e-bd26-efac42b191e5",
      "name": "Groq Chat Model1",
      "credentials": {
        "groqApi": {
          "id": "IUNpwl8TJdD6I0oj",
          "name": "Groq account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.dateTimeTool",
      "typeVersion": 2,
      "position": [
        3280,
        480
      ],
      "id": "78fd71ee-77a1-4534-9497-0e937251973c",
      "name": "Date & Time"
    },
    {
      "parameters": {
        "operation": "search",
        "base": {
          "__rl": true,
          "value": "appQRibCWiCKPDMaq",
          "mode": "list",
          "cachedResultName": "CurtleBase",
          "cachedResultUrl": "https://airtable.com/appQRibCWiCKPDMaq"
        },
        "table": {
          "__rl": true,
          "value": "tblgMXdyCLJmu3fzO",
          "mode": "list",
          "cachedResultName": "Email_Summary",
          "cachedResultUrl": "https://airtable.com/appQRibCWiCKPDMaq/tblgMXdyCLJmu3fzO"
        },
        "filterByFormula": "=AND({sender}='{{ $json.senders_email_ID }}', {telegram_key}='{{ $json.tel_id }}')",
        "options": {
          "fields": [
            "email_summary",
            "title",
            "subject",
            "date",
            "sender",
            "is_urgent"
          ]
        }
      },
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2.1,
      "position": [
        1740,
        340
      ],
      "id": "a622d133-c0e4-4dd0-8760-5bb6f477e622",
      "name": "Search records",
      "alwaysOutputData": true,
      "credentials": {
        "airtableTokenApi": {
          "id": "uv78PdSvDlXTLSVC",
          "name": "Airtable Personal Access Token account"
        }
      }
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        2160,
        260
      ],
      "id": "31bfa26b-54a0-4675-8dc7-fa29fa30b63f",
      "name": "Aggregate"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.first().json.data.map((item) => item);\nconst result = items.map((item, index) => {\n  return `${index + 1}:\\n ${JSON.stringify(item)}`;\n});\n\nreturn { result };\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2340,
        260
      ],
      "id": "2abdd276-5fe7-4f8c-9423-684cf827ea90",
      "name": "Code"
    },
    {
      "parameters": {
        "model": "meta-llama/llama-3-70b-instruct",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        2500,
        460
      ],
      "id": "f1899bcd-7991-4b4f-a5ba-76fe8516c9b2",
      "name": "OpenRouter Chat Model",
      "credentials": {
        "openRouterApi": {
          "id": "qd1qqOWZA6w5iyuQ",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "83eeb006-1e89-458b-adb2-999f2fd78b09",
              "leftValue": "={{ $json.id }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1940,
        340
      ],
      "id": "96d36ec8-4a92-4225-99d1-5f46efa1af50",
      "name": "If"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n  \"summary\": {{$('When Executed by Another Workflow').item.json.mail_body}},\n  \"positive_reply\": {\n    \"prediction\": \"Lack Of data\",\n    \"confidence\": \"Lack Of data\"\n  },\n  \"negative_reply\": {\n    \"prediction\": \"Lack Of data\",\n    \"confidence\": \"Lack Of data\"\n  },\n  \"no_reply\": {\n    \"prediction\": \"Lack Of data\",\n    \"confidence\": \"Lack Of data\"\n  },\n  \"recommended_strategy\": \"Lack Of data\",\n  \"rationale\": \"Lack Of data\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2160,
        440
      ],
      "id": "093962e7-12e4-4862-8e66-d5ff6c24e006",
      "name": "Edit Fields"
    }
  ],
  "connections": {
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "Search records",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Pass Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "AI Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Pass Data": {
      "main": [
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Think": {
      "ai_tool": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser1": {
      "ai_outputParser": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Groq Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Date & Time": {
      "ai_tool": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Search records": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "instanceId": "93a57ec538b33e4266db3cf3999c1a44d55a10d31d3652892046b38f2e1c35ae"
  }
}
